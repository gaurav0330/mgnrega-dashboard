import React, { useState } from "react";
import { Volume2, Info } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function SummaryTiles({ data, lang }) {
  if (!data) return null;

  const [showHelp, setShowHelp] = useState(false);

  const helpText = {
    en: {
      people: "Total individuals who got at least one day of work under MGNREGA.",
      days: "Average days of work per registered household.",
      payment: "Percentage of payments generated within 15 days of work completion.",
    },
    hi: {
      people: "‡§Æ‡§®‡§∞‡•á‡§ó‡§æ ‡§ï‡•á ‡§§‡§π‡§§ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ï‡•Å‡§≤ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡•§",
      days: "‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§î‡§∏‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§¶‡§ø‡§µ‡§∏‡•§",
      payment: "‡§ï‡•Å‡§≤ ‡§≠‡•Å‡§ó‡§§‡§æ‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§ú‡•ã 15 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡§®‡§æ‡§è ‡§ó‡§è‡•§",
    },
  };

  const tiles = [
    {
      label_en: "Individuals worked üë∑‚Äç‚ôÇÔ∏è",
      label_hi: "‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø üë∑‚Äç‚ôÄÔ∏è",
      value: data.people_got_work?.toLocaleString() ?? "‚Äî",
      color: "bg-green-100 text-green-900 border-green-300",
      help: helpText[lang].people,
    },
    {
      label_en: "Avg. days per household üìÖ",
      label_hi: "‡§î‡§∏‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§¶‡§ø‡§µ‡§∏ üìÖ",
      value: data.avg_days_per_household ?? "‚Äî",
      color: "bg-amber-100 text-amber-900 border-amber-300",
      help: helpText[lang].days,
    },
    {
      label_en: "Payments within 15 days (%) üí∞",
      label_hi: "15 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§≠‡•Å‡§ó‡§§‡§æ‡§® (%) üí∞",
      value:
        data.payments_within_15_days != null
          ? `${data.payments_within_15_days.toFixed(1)}%`
          : "‚Äî",
      color: "bg-blue-100 text-blue-900 border-blue-300",
      help: helpText[lang].payment,
    },
  ];

  function speak(text) {
    if ("speechSynthesis" in window) {
      const msg = new SpeechSynthesisUtterance(text);
      msg.lang = lang === "en" ? "en-IN" : "hi-IN";
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(msg);
    }
  }

  return (
    <div className="mt-8">
      <div className="flex justify-between items-center mb-3">
        <h2 className="text-xl font-semibold text-gray-700">
          {lang === "en" ? "At a glance" : "‡§è‡§ï ‡§®‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç"}
        </h2>
        <button
          onClick={() => setShowHelp(true)}
          className="flex items-center space-x-1 text-blue-600 hover:underline"
        >
          <Info className="w-4 h-4" />
          <span>{lang === "en" ? "What does this mean?" : "‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§¶‡§∞‡•ç‡§∂‡§æ‡§§‡§æ ‡§π‡•à?"}</span>
        </button>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
        {tiles.map((tile, i) => (
          <motion.div
            key={i}
            className={`p-5 rounded-2xl border shadow ${tile.color} relative text-center`}
            initial={{ opacity: 0, y: 15 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: i * 0.15 }}
          >
            <div className="text-3xl font-extrabold mb-1">{tile.value}</div>
            <div className="text-base font-medium">
              {lang === "en" ? tile.label_en : tile.label_hi}
            </div>
            <button
              onClick={() =>
                speak(
                  `${lang === "en" ? tile.label_en : tile.label_hi}: ${tile.value}`
                )
              }
              className="absolute top-2 right-2 p-1.5 bg-white rounded-full shadow hover:bg-gray-100 transition"
              title="Speak value"
            >
              <Volume2 className="w-4 h-4 text-gray-600" />
            </button>
          </motion.div>
        ))}
      </div>

      <AnimatePresence>
        {showHelp && (
          <motion.div
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              className="bg-white rounded-2xl shadow-lg p-6 max-w-md text-gray-700"
              initial={{ scale: 0.9 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.9 }}
            >
              <h3 className="text-lg font-semibold mb-2">
                {lang === "en" ? "Understanding the metrics" : "‡§Ü‡§Å‡§ï‡§°‡§º‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡•á‡§Ç"}
              </h3>
              <ul className="space-y-2 text-sm">
                {tiles.map((t, i) => (
                  <li key={i}>
                    <b>{lang === "en" ? t.label_en : t.label_hi}:</b> {t.help}
                  </li>
                ))}
              </ul>
              <button
                onClick={() => setShowHelp(false)}
                className="mt-4 w-full bg-blue-600 text-white py-2 rounded-xl hover:bg-blue-700 transition"
              >
                {lang === "en" ? "Close" : "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç"}
              </button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
